{"version":3,"sources":["Utils/network-requests.js","Components/results.js","Components/overlay-components.js","space-station-spotter.js","serviceWorker.js","index.js"],"names":["fetchLocation","location","fetch","method","body","then","r","json","coords","results","geometry","address","callSpaceStationApi","lat","lng","data","response","getResults","a","searchLocation","Promise","res","rej","timer","setTimeout","navigator","geolocation","getCurrentPosition","pos","clearTimeout","longitude","latitude","locationData","spaceStationResults","Error","padSingleDigitWithZero","number","MapResults","map","pass","index","className","key","icon","faClock","timestamp","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","unixTimeConverter","risetime","ChooseAnotherLocation","reset","onClick","DisplayResults","Errors","error","Loading","loading","faSpinner","size","spin","GeoCode","submitLocation","InputAndButton","locationRef","React","createRef","Fragment","ref","this","id","type","placeholder","props","current","value","Component","OverLay","overlayState","faSatelliteDish","SpaceStationSpotter","state","loadingState","setOverlayState","bind","setLocation","setState","catch","locationResult","initialCenter","center","google","zoom","position","name","GoogleApiWrapper","apiKey","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.68b2a296.chunk.js","sourcesContent":["export const GeoLocation = () => {\n  return new Promise((res, rej) => {\n\n    let timer = setTimeout(function() {\n      return rej(\"GeoLocation Time Out\");\n    }, 10000);\n\n    navigator.geolocation.getCurrentPosition(pos => {\n      clearTimeout(timer);\n      const lng = pos.coords.longitude;\n      const lat = pos.coords.latitude;\n      res(`${lat} ${lng}`);\n    });\n  });\n};\n\nconst fetchLocation = location =>\n  fetch(\n    \"https://us-central1-nathan-downes-express-api.cloudfunctions.net/api/maps\",\n    { method: \"POST\", body: `${location}` }\n  )\n    .then(r => r.json())\n    .then(r => ({\n      coords: r.results[0].geometry.location,\n      address: r.results[0][\"formatted_address\"]\n    }));\n\nexport const callSpaceStationApi = (lat, lng) =>\n  fetch(\n    `https://cors-anywhere.herokuapp.com/http://api.open-notify.org/iss-pass.json?lat=${lat}&lon=${lng}&alt=20&n=3`\n  )\n    .then(r => r.json())\n    .then(data => data.response || null);\n\nexport const getResults = async location => {\n  let searchLocation = location;\n\n  // If no location is provided use HTML 5 geolocation API for coords\n  !location && (searchLocation = await GeoLocation());\n\n  const locationData = await fetchLocation(searchLocation);\n\n  const {\n    coords: { lat, lng },\n    address\n  } = locationData;\n\n  const spaceStationResults = await callSpaceStationApi(lat, lng);\n  if (!spaceStationResults)\n    throw new Error(\"Bad response from space station API\");\n\n  return { lat, lng, spaceStationResults, address };\n};\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\n\nconst padSingleDigitWithZero = number => (number < 10 && `0${ number }`) || number;\n\nexport const unixTimeConverter = timestamp => {\n  let a = new Date(timestamp * 1000);\n  let months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ];\n  let year = a.getFullYear();\n  let month = months[a.getMonth()];\n  let date = a.getDate();\n  let hour = padSingleDigitWithZero(a.getHours());\n  let min = padSingleDigitWithZero(a.getMinutes());\n  let sec = padSingleDigitWithZero(a.getSeconds());\n  return ` ${ date } / ${ month } / ${ year }  at  ${ hour }:${ min }:${ sec }`;\n};\n\nexport const MapResults = ({ results }) =>\n  results.map((pass, index) => (\n    <div className=\"result-row\" key={ index }>\n      <p key={ index + 1 }>\n        { index + 1 }\n        <span>\n          <FontAwesomeIcon icon={ faClock } />\n        </span>\n        {unixTimeConverter(pass.risetime)}\n      </p>\n    </div>\n  ));\n\nconst DisplayResults = ({ results, reset, address }) =>\n  results && (\n    <div className=\"results\">\n      <p>{ address }</p>\n      <MapResults results={ results } />\n      <ChooseAnotherLocation reset={ reset } />\n    </div>\n  );\n\nexport const ChooseAnotherLocation = ({ reset }) => (\n  <div className=\"choose-another-location\">\n    <button onClick={() => reset(true)}>Choose Another Location</button>\n  </div>\n);\n\nexport default DisplayResults;\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSatelliteDish } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\n\nexport const Errors = ({ error }) =>\n  error && (\n    <div className=\"location-error\">\n      <p>Error - Location Unavailable Or Unable To Acquire Geolocation</p>\n    </div>\n  ) || null;\n\nconst OverLay = ({ overlayState, error, submitLocation, loading }) =>\n  overlayState && (\n    <div className=\"overlay\">\n      <h1>Space Station Spotter</h1>\n      <span className=\"icon\">\n        <FontAwesomeIcon icon={ faSatelliteDish } size=\"3x\" />\n      </span>\n      <GeoCode submitLocation={ submitLocation } />\n      <h2>Or</h2>\n      <span className=\"controls\">\n        <InputAndButton submitLocation={ submitLocation } />\n      </span>\n      <p>When can you see the space station? Enter a location to find out!</p>\n      <Errors error={ error } />\n      <Loading loading={ loading } />\n    </div>\n  ) || null;\n\nexport const Loading = ({ loading }) =>\n  loading && (\n    <div className=\"loading\">\n      <FontAwesomeIcon icon={ faSpinner } size=\"3x\" spin />\n    </div>\n  );\n\nexport const GeoCode = ({ submitLocation }) => (\n  <div className=\"geocode\">\n    <button onClick={() => submitLocation()}>Use Current Location</button>\n  </div>\n);\n\nexport class InputAndButton extends Component {\n  locationRef = React.createRef();\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"location-input-wrapper\">\n          <input\n            ref={ this.locationRef }\n            id=\"location-input\"\n            type=\"text\"\n            placeholder=\"Choose Location\"\n          />\n        </div>\n        <div className=\"submit-button\">\n          <button\n            onClick={() =>\n              this.props.submitLocation(this.locationRef.current.value)\n            }\n          >\n            Submit\n          </button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default OverLay;\n","import React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker } from \"google-maps-react\";\nimport { getResults } from \"./Utils/network-requests\";\nimport DisplayResults from \"./Components/results.js\";\nimport OverLay from \"./Components/overlay-components.js\";\n\n\nexport class SpaceStationSpotter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: 52.489471,\n      lng: -1.898575,\n      error: false,\n      spaceStationResults: null,\n      overlayState: true,\n      loadingState: false\n    };\n    this.setOverlayState = this.setOverlayState.bind(this);\n    this.setLocation = this.setLocation.bind(this);\n  }\n\n  setOverlayState(state) {\n    this.setState({ overlayState: state });\n  }\n\n  async setLocation(location) {\n    this.setState({ loadingState: true, error: false })\n\n    let locationResult = await getResults(location).catch(() => {\n      this.setState({ error: true, loadingState: false });\n    });\n\n    const { lat, lng, spaceStationResults, address } = locationResult || {};\n    !this.state.error &&\n      this.setState({\n        lat,\n        lng,\n        spaceStationResults,\n        address,\n        loadingState: false,\n        overlayState: false\n      });\n  }\n\n  render() {\n    const { lat , lng , spaceStationResults, error, overlayState, loadingState, address } = this.state\n    return (\n      <div id=\"page-wrapper\">\n        <OverLay\n          overlayState={ overlayState }\n          submitLocation={ this.setLocation }\n          error={ error }\n          loading={ loadingState }\n        />\n        <div id=\"map\" className=\"map\">\n          <Map\n            initialCenter={{\n              lat: 52.489471,\n              lng: -1.898575\n            }}\n            center={{\n              lat,\n              lng\n            }}\n            google={ this.props.google }\n            zoom={3}\n            className={\"map\"}\n          >\n            <Marker\n              position={{ lat, lng }}\n              name={\"Current location\"}\n            />\n          </Map>\n          <DisplayResults\n            reset={ this.setOverlayState }\n            results={ spaceStationResults }\n            address= { address }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCyNv5BOZZfdKO3VDhQCOA3Ufm8tv8rCF8\"\n})(SpaceStationSpotter);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport SpaceStationSpotter from './space-station-spotter';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SpaceStationSpotter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}